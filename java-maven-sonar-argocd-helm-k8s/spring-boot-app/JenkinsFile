// This is the final version, using your specific user ID 111:113 to fix all permission errors.
pipeline {
  agent {
    docker {
      image 'jerry943/maven-docker-agent-java17:v1'
      registryUrl 'https://index.docker.io/v1/'
      registryCredentialsId 'docker-cred'
      // THE FIX: Running the container with your user/group ID (111:113)
      args '--user 111:113 -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  stages {
    stage('Checkout') {
      steps {
        // This will now succeed because the agent's user ID matches the host's folder owner.
        checkout scm
        sh 'echo "Workspace checked out successfully:" && ls -la'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://44.201.166.87:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      // This stage is now simplified because permissions are correct from the start.
      environment {
        GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
        GIT_USER_NAME = "Harshjerry"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            echo "--- Entering final stage ---"
            
            git config user.email "harshdeep1043@gmail.com"
            git config user.name "Harshjerry-CI-Bot"
            
            git checkout main
            
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "CI: Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
          '''
        }
      }
    }
  }
  // This post-build action is a best practice for clean, reliable builds.
  post {
    always {
        echo "Pipeline finished. Cleaning workspace."
        cleanWs()
    }
  }
}