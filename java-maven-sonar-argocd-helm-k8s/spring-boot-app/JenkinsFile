pipeline {
  agent {
    docker {
      image 'jerry943/maven-docker-agent-java17:v1'
      registryUrl 'https://index.docker.io/v1/'
      registryCredentialsId 'docker-cred'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  stages {
    stage('Checkout') {
      steps {
        // This is the CRITICAL first step.
        // It performs a full clone and creates the .git directory.
        checkout scm

        // This command helps you verify the .git directory exists after checkout.
        sh 'echo "Workspace after checkout:" && ls -la'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://44.201.166.87:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
            GIT_USER_NAME = "Harshjerry"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    # STEP 1: Add debugging to see what's happening.
                    echo "--- Entering final stage ---"
                    echo "Current directory is:"
                    pwd
                    echo "Forcing directory to workspace root: ${WORKSPACE}"
                    
                    # STEP 2: Force change to the workspace root, just to be safe.
                    cd ${WORKSPACE}
                    
                    echo "Directory contents (looking for .git folder):"
                    ls -la
                    
                    # STEP 3: Now run the git commands.
                    echo "Attempting git configuration..."
                    git config user.email "harshdeep1043@gmail.com"
                    git config user.name "jerry6"

                    echo "Updating deployment file and pushing to git..."
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
