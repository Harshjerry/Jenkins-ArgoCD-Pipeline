pipeline {
  agent {
    docker {
      image 'jerry943/maven-docker-agent-java17:v1'
      registryUrl 'https://index.docker.io/v1/'
      registryCredentialsId 'docker-cred'
      // All stages will run as root in this container
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  // This block defines what happens AFTER the build. It's the key to the solution.
  post {
    always {
      // This will run whether the pipeline succeeds or fails.
      // It cleans the workspace to prevent permission errors on the next build.
      echo 'Build finished. Cleaning up workspace for the next run...'
      cleanWs()
    }
  }

  stages {
    stage('Checkout') {
      steps {
        // No need for cleanWs() here anymore. The checkout will now always
        // happen on a clean slate because of the 'post' block.
        checkout scm
        sh 'echo "Workspace after checkout:" && ls -la'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.83.145.137:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
        GIT_USER_NAME = "Harshjerry"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            cd ${WORKSPACE}
            # No 'chown' is needed because all stages now run as root in the same agent.
            
            git config user.email "harshdeep1043@gmail.com"
            git config user.name "jerry-ci"
            
            # Switch to the 'main' branch to commit changes
            git checkout main
            
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "CI: Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
          '''
        }
      }
    }
  }
}
