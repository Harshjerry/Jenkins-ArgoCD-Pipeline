// Use a pipeline-level agent for all stages EXCEPT the final one.
// CRUCIALLY, this agent does NOT run as root, so the initial checkout will succeed.
agent {
    docker {
        image 'jerry943/maven-docker-agent-java17:v1'
        registryUrl 'https://index.docker.io/v1/'
        registryCredentialsId 'docker-cred'
        args '-v /var/run/docker.sock:/var/run/docker.sock' // Note: no '--user root'
    }
}

pipeline {
    stages {
        stage('Checkout') {
            steps {
                // Best practice: always clean the workspace before checkout.
                // This will now work because the agent has permission.
                cleanWs()
                checkout scm
                sh 'echo "Workspace checked out successfully:" && ls -la'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.83.145.137:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                  sh '''
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                  '''
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            // OVERRIDE the agent for this stage only.
            // This is the only place we need root privileges.
            agent {
                docker {
                    image 'jerry943/maven-docker-agent-java17:v1'
                    registryUrl 'https://index.docker.io/v1/'
                    registryCredentialsId 'docker-cred'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            environment {
                GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
                GIT_USER_NAME = "Harshjerry"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        # No chown needed, this entire stage runs as root
                        
                        git config user.email "harshdeep1043@gmail.com"
                        git config user.name "jerry-ci-bot"
                        
                        git checkout main
                        
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "CI: Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
                    '''
                }
            }
        }
    }
}
