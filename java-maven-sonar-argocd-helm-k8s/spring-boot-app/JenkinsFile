pipeline {
  agent {
    docker {
      image 'jerry943/maven-docker-agent-java17:v1'
      registryUrl 'https://index.docker.io/v1/'
      registryCredentialsId 'docker-cred'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  environment {
     GIT_REPO_NAME = 'Jenkins-ArgoCD-Pipeline'
     GIT_USER_NAME = 'Harshjerry'
  }
  stages {
    stage('Checkout') {
      steps {
        // This stage is handled by the Jenkins UI configuration, but we can verify the checkout
        sh 'echo "Checkout handled by Jenkins UI, listing workspace contents:"'
        sh 'ls -l'
      }
    }
    stage('Build and Test') {
      steps {
        // Change into the repository directory first
        dir(GIT_REPO_NAME) {
          sh 'ls -ltr'
          // build the project and create a JAR file
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.83.145.137:9000"
      }
      steps {
        // Change into the repository directory first
        dir(GIT_REPO_NAME) {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
          }
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        // Change into the repository directory first
        dir(GIT_REPO_NAME) {
          script {
              sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
              def dockerImage = docker.image("${DOCKER_IMAGE}")
              docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                  dockerImage.push()
              }
          }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
         GIT_REPO_NAME = 'Jenkins-ArgoCD-Pipeline' // Your repo name
         GIT_USER_NAME = 'Harshjerry'              // Your user name
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                  # THIS IS THE FIX: Change into the correct directory first!
                  cd ${GIT_REPO_NAME}

                  # Now the rest of the script will work perfectly
                  git config user.email "harshdeep1043@gmail.com"
                  git config user.name "Harshjerry"
                  BUILD_NUMBER=${BUILD_NUMBER}
                  sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                  git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                  git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                  git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}