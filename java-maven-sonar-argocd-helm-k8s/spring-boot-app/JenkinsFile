// This is the final, correct architecture. It uses different agents for different permissions.
pipeline {
    // This is the default agent for stages that DON'T need special permissions.
    // It runs as your user 111, so it has access to the workspace.
    agent {
        docker {
            image 'jerry943/maven-docker-agent-java17:v1'
            registryUrl 'https://index.docker.io/v1/'
            registryCredentialsId 'docker-cred'
            args '--user 111:113 -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs() // Always clean first. This will now work.
                checkout scm
                sh 'echo "Workspace checked out successfully:" && ls -la'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://44.201.166.87:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                  sh '''
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                  '''
                }
            }
        }
        // FOR THE NEXT TWO STAGES, WE NEED MORE POWER
        stage('Build, Push, and Update') {
            // OVERRIDE THE AGENT. This stage group runs as root.
            agent {
                docker {
                    image 'jerry943/maven-docker-agent-java17:v1'
                    registryUrl 'https://index.docker.io/v1/'
                    registryCredentialsId 'docker-cred'
                    // We run as root ONLY for the tasks that need it.
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            stages {
                stage('Build and Push Docker Image') {
                    environment {
                        DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
                    }
                    steps {
                        script {
                            // This now runs as root and can access the Docker socket
                            sh '''
                                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                                docker build -t ${DOCKER_IMAGE} .
                            '''
                            def dockerImage = docker.image("${DOCKER_IMAGE}")
                            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                                dockerImage.push()
                            }
                        }
                    }
                }
                stage('Update Deployment File') {
                    environment {
                        GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
                        GIT_USER_NAME = "Harshjerry"
                    }
                    steps {
                        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                            sh '''
                                # Running as root, we can access and configure git
                                git config user.email "harshdeep1043@gmail.com"
                                git config user.name "Harshjerry-CI-Bot"
                                
                                git checkout main
                                
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git commit -m "CI: Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
                            '''
                        }
                    }
                }
            }
        }
    }
    // This will run at the end to clean the workspace, preventing future lockouts.
    post {
        always {
            cleanWs()
        }
    }
}