// Define the agent ONCE at the top level.
// All stages will run in this same container, preserving the workspace.
agent {
    docker {
        image 'jerry943/maven-docker-agent-java17:v1'
        registryUrl 'https://index.docker.io/v1/'
        registryCredentialsId 'docker-cred'
        // Run as root to have permissions for docker.sock and installing tools if needed
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
}

pipeline {
    stages {
        stage('Checkout') {
            steps {
                // This ensures the full repository with the .git folder is checked out
                checkout scm
                sh 'echo "Workspace contents after checkout:"'
                // This will now show the .git directory
                sh 'ls -la'
            }
        }
        stage('Build and Test') {
            steps {
                // Use the dir step for cleaner directory changes
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean package'
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.82.248.0:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                // Use the full registry path for clarity
                DOCKER_IMAGE = "docker.io/jerry943/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
                docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                    docker.image(DOCKER_IMAGE).push()
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
                GIT_USER_NAME = "Harshjerry"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        # These commands will now work because we are in the same container
                        # that ran the checkout scm step, so the .git directory exists.
                        git config user.email "harshdeep1043@gmail.com"
                        git config user.name "jerry6"

                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
