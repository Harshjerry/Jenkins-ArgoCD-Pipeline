pipeline {
  agent {
    docker {
      image 'jerry943/maven-docker-agent-java17:v1'
      registryUrl 'https://index.docker.io/v1/'
      registryCredentialsId 'docker-cred'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  stages {
    stage('Checkout') {
      steps {
        // --- THIS IS THE CRITICAL FIX ---
        // It deletes the workspace from the previous build, including any
        // files owned by 'root', before attempting to check out new code.
        cleanWs()

        // This will now succeed because the workspace is empty and writable
        // by the default Jenkins user who performs the checkout.
        checkout scm

        sh 'echo "Workspace after checkout:" && ls -la'
      }
    }

    // ... All your other stages (Build, Sonar, Docker Push) remain exactly the same ...
    
    stage('Build and Test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.83.145.137:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jerry943/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCK_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-ArgoCD-Pipeline"
        GIT_USER_NAME = "Harshjerry"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            cd ${WORKSPACE}
            # This is STILL needed because this 'sh' step runs as root
            chown -R root:root .
            
            git config user.email "harshdeep1043@gmail.com"
            git config user.name "jerry7"
            
            # This is also STILL needed to commit to a branch
            git checkout main
            
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "CI: Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
          '''
        }
      }
    }
  }
}
